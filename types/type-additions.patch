===================================================================
diff --git a/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts b/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts
--- a/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts	(revision b3dbabae86f862914df4b4404a6385c56918c34b)
+++ b/types/foundry/client/pixi/canvas-layer/grid-layer.d.ts	(revision db2c6a72df3cd4a1431aa39fd3c8ec6ce94a4d28)
@@ -56,22 +56,24 @@
          * Measure the grid-wise distance between two point coordinates.
          * @param origin The origin point
          * @param target The target point
+         * @param options Additional options which modify the measurement
          * @return The measured distance between these points
          *
          * @example
          * let distance = canvas.grid.measureDistance({x: 1000, y: 1000}, {x: 2000, y: 2000});
          */
-        measureDistance(origin: Point, target: Point): number;
+        measureDistance(origin: Point, target: Point, options?: MeasureDistancesOptions): number;

         /**
          * Measure the distance traveled over an array of distance segments.
          * @param segments An array of measured segments
          * @param options  Additional options which modify the measurement
          */
-        measureDistances(segments: Segment[], options?: Record<string, unknown>): number[];
+        measureDistances(segments: Segment[], options?: MeasureDistancesOptions): number[];

         /* -------------------------------------------- */
         /*  Grid Highlighting Methods                   */
+
         /* -------------------------------------------- */

         /**
@@ -121,6 +123,11 @@
         gridColor?: string | null;
         gridAlpha?: number | null;
     }
+
+    interface MeasureDistancesOptions {
+        /** Return the distance in grid increments rather than the co-ordinate distance. */
+        gridSpaces?: boolean;
+    }
 }

 interface GridLayerOptions extends CanvasLayerOptions {
===================================================================
diff --git a/types/foundry/client/pixi/board.d.ts b/types/foundry/client/pixi/board.d.ts
--- a/types/foundry/client/pixi/board.d.ts	(revision b3dbabae86f862914df4b4404a6385c56918c34b)
+++ b/types/foundry/client/pixi/board.d.ts	(revision db2c6a72df3cd4a1431aa39fd3c8ec6ce94a4d28)
@@ -313,7 +317,7 @@
          * @param origin  Point to display Ping at
          * @param options Additional options to configure how the ping is drawn.
          */
-        ping(origin: Point, options: Record<string, unknown>): Promise<boolean>;
+        ping(origin: Point, options?: Record<string, unknown>): Promise<boolean>;

         /**
          * Create a BlurFilter instance and register it to the array for updates when the zoom level changes.
===================================================================
diff --git a/types/foundry/common/primitives/set.d.ts b/types/foundry/common/primitives/set.d.ts
index e69de29..e1cf635 100644
--- a/types/foundry/common/primitives/set.d.ts
+++ b/types/foundry/common/primitives/set.d.ts
@@ -0,0 +1,129 @@
+interface Set<T> {
+    /**
+     * Test whether every element in this Set satisfies a certain test criterion.
+     * @see Array#every
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being tested.
+     * @returns Does every element in the set satisfy the test criterion?
+     */
+    every<S extends T>(test: (value: T, index: number, set: Set<T>) => value is S): this is Set<S>;
+    /**
+     * Test whether every element in this Set satisfies a certain test criterion.
+     * @see Array#every
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being tested.
+     * @returns Does every element in the set satisfy the test criterion?
+     */
+    every(test: (value: T, index: number, set: Set<T>) => boolean): boolean;
+
+    /**
+     * Return the difference of two sets.
+     * @param other Some other set to compare against
+     * @returns The difference defined as objects in this which are not present in other
+     */
+    difference(other: Set<T>): Set<T>;
+    /**
+     * Test whether this set is equal to some other set.
+     * Sets are equal if they share the same members, independent of order
+     * @param other Some other set to compare against
+     * @returns Are the sets equal?
+     */
+    equals(other: Set<T>): boolean;
+    /**
+     * Return the first value from the set.
+     * @returns The first element in the set, or undefined
+     */
+    first(): T;
+    /**
+     * Return the intersection of two sets.
+     * @param other Some other set to compare against
+     * @returns The intersection of both sets
+     */
+    intersection(other: Set<T>): Set<T>;
+    /**
+     * Test whether this set has an intersection with another set.
+     * @param other Another set to compare against
+     * @returns Do the sets intersect?
+     */
+    intersects(other: Set<T>): boolean;
+    /**
+     * Test whether this set is a subset of some other set.
+     * A set is a subset if all its members are also present in the other set.
+     * @param other Some other set that may be a subset of this one
+     * @returns Is the other set a subset of this one?
+     */
+    isSubset(other: Set<T>);
+    /**
+     * Convert a set to a JSON object by mapping its contents to an array
+     * @returns The set elements as an array.
+     */
+    toObject(): T[];
+    /**
+     * Filter this set to create a subset of elements which satisfy a certain test criterion.
+     * @see Array#filter
+     * @param test  The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being filtered.
+     * @returns A new Set containing only elements which satisfy the test criterion.
+     */
+    filter<S extends T>(test: (value: T, index: number, set: Set<T>) => value is S): Set<S>;
+    /**
+     * Filter this set to create a subset of elements which satisfy a certain test criterion.
+     * @see Array#filter
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being filtered.
+     * @returns A new Set containing only elements which satisfy the test criterion.
+     */
+    filter(test: (value: T, index: number, set: Set<T>) => boolean): Set<T>;
+
+    /**
+     * Find the first element in this set which satisfies a certain test criterion.
+     * @see Array#find
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being searched.
+     * @returns The first element in the set which satisfies the test criterion, or undefined.
+     */
+    find<S extends T>(test: (value: T, index: number, obj: Set<T>) => value is S): S | undefined;
+    /**
+     * Find the first element in this set which satisfies a certain test criterion.
+     * @see Array#find
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being searched.
+     * @returns The first element in the set which satisfies the test criterion, or undefined.
+     */
+    find(test: (value: T, index: number, obj: Set<T>) => boolean): T | undefined;
+    /**
+     * Create a new Set where every element is modified by a provided transformation function.
+     * @see Array#map
+     * @param transform The transformation function to apply.Positional arguments are
+     * the value, the index of iteration, and the set being transformed.
+     * @returns A new Set of equal size containing transformed elements.
+     */
+    map<U>(transform: (value: T, index: number, set: Set<T>) => U): Set<U>;
+    /**
+     * Create a new Set with elements that are filtered and transformed by a provided reducer function.
+     * @see Array#reduce
+     * @param reducer A reducer function applied to each value. Positional
+     * arguments are the accumulator, the value, the index of iteration, and the set being reduced.
+     * @param accumulator The initial value of the returned accumulator.
+     * @returns The final value of the accumulator.
+     */
+    reduce<U>(reducer: (previousValue: U, currentValue: T, currentIndex: number, set: Set<T>) => U, accumulator: U): U;
+    /**
+     * Create a new Set with elements that are filtered and transformed by a provided reducer function.
+     * @see Array#reduce
+     * @param reducer A reducer function applied to each value. Positional
+     * arguments are the accumulator, the value, the index of iteration, and the set being reduced.
+     * @param accumulator The initial value of the returned accumulator.
+     * @returns The final value of the accumulator.
+     */
+    reduce(reducer: (previousValue: T, currentValue: T, currentIndex: number, set: Set<T>) => T, accumulator: T): T;
+
+    /**
+     * Test whether any element in this Set satisfies a certain test criterion.
+     * @see Array#some
+     * @param test The test criterion to apply. Positional arguments are the value,
+     * the index of iteration, and the set being tested.
+     * @returns Does any element in the set satisfy the test criterion?
+     */
+    some(test: (value: T, index: number, set: Set<T>) => unknown): boolean;
+}
===================================================================
diff --git a/types/foundry/client/core/hooks.d.ts b/types/foundry/client/core/hooks.d.ts
--- a/types/foundry/client/core/hooks.d.ts	(revision b265d4c6d120193abe61c9b0b61f2e7af47fb13f)
+++ b/types/foundry/client/core/hooks.d.ts	(date 1698592741600)
@@ -6,6 +6,7 @@
     // Sequence of hooks called on world load
     type HookParamsInit = HookParameters<"init", never>;
     type HookParamsSetup = HookParameters<"setup", never>;
+    type HookParamsI18nInit = HookParameters<"i18nInit", never>;
     type HookParamsCanvasInit = HookParameters<"canvasInit", [DrawnCanvas]>;
     type HookParamsCanvasReady = HookParameters<"canvasReady", [DrawnCanvas]>;
     type HookParamsReady = HookParameters<"ready", never>;
@@ -60,6 +61,7 @@
         static on(...args: HookParamsSetup): number;
         static on(...args: HookParamsInit): number;
         static on(...args: HookParamsReady): number;
+        static on(...args: HookParamsI18nInit): number;
         static on(...args: HookParamsCanvasInit): number;
         static on(...args: HookParamsCanvasReady): number;
         static on(...args: HookParamsClose<CombatTrackerConfig, "CombatTrackerConfig">): number;
===================================================================
diff --git a/types/src/module/scene/document.d.ts b/types/src/module/scene/document.d.ts
--- a/types/src/module/scene/document.d.ts	(revision 3fff4ddf913bc97d8f15238018b92b4508817a6a)
+++ b/types/src/module/scene/document.d.ts	(date 1701707013831)
@@ -33,6 +33,7 @@
     readonly tiles: foundry.abstract.EmbeddedCollection<TileDocumentPF2e<this>>;
     get sheet(): SceneConfigPF2e<this>;
     createEmbeddedDocuments(embeddedName: "Token", data: PreCreate<foundry.documents.TokenSource>[], context?: DocumentModificationContext<this>): Promise<TokenDocumentPF2e<this>[]>;
+    createEmbeddedDocuments(embeddedName: "Note", data: PreCreate<foundry.documents.NoteSource>[], context?: DocumentModificationContext<this>): Promise<NoteDocument<this>[]>;
     createEmbeddedDocuments(embeddedName: string, data: object[], context?: DocumentModificationContext<this>): Promise<foundry.abstract.Document[]>;
 }
 export { ScenePF2e };
===================================================================
diff --git a/types/types/foundry/common/utils/collection.d.ts b/types/types/foundry/common/utils/collection.d.ts
--- a/types/types/foundry/common/utils/collection.d.ts	(revision 3fff4ddf913bc97d8f15238018b92b4508817a6a)
+++ b/types/types/foundry/common/utils/collection.d.ts	(date 1701865867719)
@@ -80,7 +80,7 @@
      * @param transformer  The transformation function to apply to each entry value
      * @return An Array of transformed values
      */
-    map<T>(transformer: (value: V) => T): T[];
+    map<T>(transformer: (value: V, index: number, collection: this) => T): T[];

     /**
      * Reduce the Collection by applying an evaluator function and accumulating entries
